#fcfs_ds
def fcfs_disk_scheduling(requests, head):
    total_head_movements = 0
    sequence = []
    for request in requests:
        total_head_movements += abs(head - request)
        head = request
        sequence.append(request)
    return total_head_movements, sequence
requests = [98, 183, 37, 122, 14, 124, 65, 67]
initial_head_position = 53
total_head_movements, sequence = fcfs_disk_scheduling(requests, initial_head_position)
print("Total head movements:", total_head_movements)
print("Sequence of disk accesses:", sequence)


#sstf_ds
def sstf_disk_scheduling(requests, initial_position):
    total_head_movement = 0
    current_position = initial_position
    while requests:
        nearest_request = min(requests, key=lambda x: abs(x - current_position))
        head_movement = abs(nearest_request - current_position)
        total_head_movement += head_movement
        current_position = nearest_request
        requests.remove(nearest_request) 
    return total_head_movement
disk_requests = [98, 183, 37, 122, 14, 124, 65, 67]
initial_head_position = 53
total_movement = sstf_disk_scheduling(disk_requests, initial_head_position)
print("Total head movement using SSTF algorithm:", total_movement)


#producer cosumer
import threading
import queue
import time
shared_queue = queue.Queue()
def producer():
    for i in range(10):
        data = i
        print("Produced: Data ",data)
        shared_queue.put(data)
        time.sleep(1)
def consumer():
    while True:
        data = shared_queue.get()
        print("Consumed: Data ",data)
        time.sleep(2)
        shared_queue.task_done()
producer_thread = threading.Thread(target=producer)
consumer_thread = threading.Thread(target=consumer)
producer_thread.start()
consumer_thread.start()
producer_thread.join()
shared_queue.join()
print("Program finished.")
